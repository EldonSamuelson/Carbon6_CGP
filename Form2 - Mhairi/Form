Technical Write up for the forms
User interface page is built using html, css and JavaScript/JQuery are used for styling the page. This page mainly provides three functionality:
1. EDI selection feature, that generates a map as per the user's choice of EDI.
2. City profile comparison feature, that allows a user to choose from a variety of options for comparing different areas of the city amongst each other.
3. EDI improvement recommendation section, that provides area specific actionable information to improve environmental deprivation in that area.

Backend develoment for the form page is mainly done in python programming language. 
Oracle is used for creating project database, SQL queries are embedded in python script to dynamically fetch query results directly 
from the database as and when a choice is made on the form page.
Common Gateway Interface (CGI) is used for making python scripts work in web environment. 
Jinja2 template designer is used to avoid typing unnecessary lines of html code in the python script, which further helps in minimizing redundancy.
Python's Folium library is used to create the leaflet map of the EDI zones and corresponding polygons are plotted on the baselayer as geojson.
For a better user experience, Environmental Deprivation Index (EDI) is explained separately. Lightbox feature is used which runs jquery(s) in the backend for its functionality. 

To summarise:
Database used: ORACLE, SQL is used to fetch the dataset from the database. 
Programming languages used: HTML, CSS, PYTHON, JS/JQuery
Python Modules used: cx_Oracle, cgi, jinja2, folium, json 


Mapping EDI Across Edinburgh City:

A user can select an EDI value (0 to 10) from the dropdown value, where EDI value 0 corresonds to areas with highest environmental deprivation and
10 corresponds to areas with least environmental deprivation.
On Submitting the choice, a map with areas belonging to the selected EDI value is displayed. Name of the places can be seen by just hovering over the mouse 
on each highlighted area/polygon.

Zone-Wise profile comparison feature:
A user can compare different zones as per the parameter he/she chooses in radio button. 
Step 1: Radiobutton Selection
Following choices are available to the user:
1. Demographic Profile
2. Environmental Profile
3. Tree-Specific Proile (% of Land Cover)
4. Tree-Specfic Profile (in Hectares)

Step 2: Selecting a zone (or zones) from search by name dropdown menu (allows multiple selection for a better user experience). 

On Submitting above choices and preferences, a table with corresponding field names/values is displayed in the form of a table.
Float values sometimes create precision error in python scripting so for example a value of 13.0 could become 12.9999999. 
To mitigate this error we declared all variables in the database as VARCHAR2 to ensure all values are strings which are immutable in python.


EDI Improvement Recommendations:
The user selects one zone and an EDI target to reach from two dropdown menus.
The python script calculates which variables are required to be improved to reach the desired target selected
An SQL database stores attributes of factors used to create the EDI. This includes zone specific values and values used to calculate the EDI.
Since this python script required floats rather than strings, a seperate SQL database was created.
The database contains zone specific attributes of factors contributing to the EDI rating, as well as derived numbers for calculating the EDI rating.
Derived values were stored to improve user side performance.

Various steps taken to improve the EDI include:
1. Increasing tree and juvenile count 
2. Increase species diversity
3. Change medium carbon sequestering land cover to high carbon sequestering land cover which has a greater contribution per hectare than medium.
4. Finally, woodland is required to be created.

Throughout the code, variables are assigned to be used to form the output. 
These assigned variables are processed to calulate the increase required for each EDI component.
Sentances are then formed using the relavent assigned variables where strings are formatted with the calculated values.
Since each calcualtion will not require increases to each variable, there are many different output options.
The formatted strings are then assigned to variables to be used in jinga2 templates.
The various output options results in some strings being repeated.
This was necessary as initially strings were joined together which caused a tuple to form, containing commas which would later need removed for printing in the template.

Three templates have been used to ensure there is always an output:
()If either of the form inputs have not been selected, a message appears to encourage the user to input correct values.
()If the target EDI selected is lower than the current EDI for the zone selected, further improvements are suggested.
()Otherwise, 3 different steps are suggested to increase the EDI.





README: EDI lightbox
Provides explanation of what the EDI is. Give context to our website.
It is included in the navigation bar on every page for this reason.
Pie chart designed from AMChart Javascript package (Logo and link contained within displayed chart)

Aerial Imagery lightbox
These are all jpegs due to the complexity of ensuring transparency in the backgrounds for aerial images.
It was therefore more suitable to create static images since no interactivity was required in these pages.

These steps are interrelated to provide a more realistic representation however it is recognised that tree growth and structure is complex so many assumptions are required.
Assumptions include:
50% of woodland is high carbon land cover, and the other 50% is medium.
Population per hectare is not changed as it is not practical for planners to reduce population.
DBH is also not included because when trees are initially planted they will not be large enough to be counted as trees (DBH>7cm).
Complex growth rates for this long term plan also complicate calculating changes in DBH so it is assumed to be constant.

